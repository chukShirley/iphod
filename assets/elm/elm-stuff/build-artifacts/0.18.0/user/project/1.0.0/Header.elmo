var _user$project$Header$aboutButtonStyle = _elm_lang$html$Html_Attributes$style(
	{
		ctor: '::',
		_0: {ctor: '_Tuple2', _0: 'position', _1: 'relative'},
		_1: {
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: 'float', _1: 'right'},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'padding', _1: '2px 2px'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'font-size', _1: '0.8em'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'display', _1: 'inline-block'},
						_1: {ctor: '[]'}
					}
				}
			}
		}
	});
var _user$project$Header$buttonStyle = _elm_lang$html$Html_Attributes$style(
	{
		ctor: '::',
		_0: {ctor: '_Tuple2', _0: 'position', _1: 'relative'},
		_1: {
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'padding', _1: '2px 2px'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'font-size', _1: '0.8em'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'display', _1: 'inline-block'},
						_1: {ctor: '[]'}
					}
				}
			}
		}
	});
var _user$project$Header$about = '\n#### About Iphod\n* It is a work in progress\n* Inerrancy is not gauranteed, so don\'t expect it\n* Facebook group at https://www.facebook.com/groups/471879323003692/\n  * report errors\n  * make suggestions\n  * ask questions\n* So far this is a work of my (aka: Paul Sutcliffe+) own doing\n* shows assigned readings and ESV text for the ACNA Red Letter, Sunday Lectionary, and Daily Prayer. Current fails include...\n  * partial verses mean nothing to the ESV API, so in this app only complete verses are shown\n\n#### Want to help?\n* this is an open source project\n* you can fork the project at https://github.com/frpaulas/iphod\n\n#### Tech stuff\n* The back end is Elixir (http://elixir-lang.org)\n* The front end is a mix of...\n  * Phoenix (http://http://www.phoenixframework.org/)\n  * javascript\n  * Elm (http://http://elm-lang.org/)\n* What was I thinking!?!\n  * I\'ve been using Elixir for closing in on 2 years and it\'s esthetically pleasing and FAST\n  * Phoenix does a respectable job of taking care of front end stuff - like Ruby on Rails\n  * Elm - Well, that was a struggle, but having learned I can say it makes doing crazy front end stuff easier\n* It\'s open source\n  * https://github.com/frpaulas/iphod\n* Other project\n  * open source donation/donor tracking at https://github.com/frpaulas/saints\n  * fun run at elmsaints.heroku.com\n  * log in with user name: guest, password: password\n\n* About Me\n  * for lack of a better word, I\'m a retired-from-day-job-for-lack-of-employment-bi-vocational-priest\n  * (hyphenation was the only way I could do it in one word)\n  * Rector at a completely unsuccessful (from a worldly POV), tiny ACNA church near Pittsburgh.\n  * Let it be said however, to the best of my knowledge, the first ever planted inside a retirement community\n  * no roof to worry about, etc.\n  * we give all our money away\n\n\n\n';
var _user$project$Header$howToUse = '\n\n* In General...\n  * click on stuff to make it appear and disappear\n* click on <button>Contact</button> to send the site admin an email\n* click on <button>About</button> to learn about this site\n  * who is responsible\n  * how it was done\n* click on <button>Config</button>\n  * to select translations you want to use\n  * to display footnotes (if available) or not\n* click on <button>MP</button>, <button>EP</button>, or <button>EU</button>\n  * to see MP, MP, or Eucharistic readings for the day\n* Calendar buttons\n  * click on day of month number to see alternate colors\n  * <Morning Prayer> to see Morning Prayer for today\n  * <Evening Prayer> to see Evening Prayer for today\n  * <MP> to see Morning Prayer readings for today\n  * <EP> to see Evening Prayer readings for today\n  * <EU> to see Eucharistic readings for today\n  * \"<\" to see last month\n  * \">\" to see next month\n  * <Roll Up> to make calendar (mostly) disappear\n  * <Roll Down> to make calendar reappear\n* colors\n  * Yellow - means \"White and alternatives\"\n  * Black - text is a required reading\n  * Grey - text is optional reading\n  * Dark Blue - text is alternative reading\n\n';
var _user$project$Header$howToModal = A2(
	_elm_lang$html$Html$span,
	{ctor: '[]'},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$a,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$href('#howTo-text'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$button,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('How to Use'),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$id('howTo-text'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('modalDialog'),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$a,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$href('#closehowTo-text'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$title('Close'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('close'),
											_1: {ctor: '[]'}
										}
									}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('X'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$h2,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('modal_header'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('How to Use'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$p,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: A2(
												_evancz$elm_markdown$Markdown$toHtml,
												{ctor: '[]'},
												_user$project$Header$howToUse),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		}
	});
var _user$project$Header$aboutModal = A2(
	_elm_lang$html$Html$span,
	{ctor: '[]'},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$a,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$href('#about-text'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$button,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('About'),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$id('about-text'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('modalDialog'),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$a,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$href('#closeabout-text'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$title('Close'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('close'),
											_1: {ctor: '[]'}
										}
									}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('X'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$h2,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('modal_header'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('About'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$p,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: A2(
												_evancz$elm_markdown$Markdown$toHtml,
												{ctor: '[]'},
												_user$project$Header$about),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		}
	});
var _user$project$Header$translations = function (model) {
	return A2(
		_elm_lang$html$Html$a,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$href('/versions'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$button,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Translations'),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Header$humor = function (model) {
	return A2(
		_elm_lang$html$Html$a,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$href('/humor'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$button,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Humor'),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Header$linkResource = function (model) {
	return A2(
		_elm_lang$html$Html$a,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$href('/linkresources'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$button,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Link Resources'),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Header$inserts = function (model) {
	return A2(
		_elm_lang$html$Html$a,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$href('/inserts'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$button,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Bulletin Inserts'),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Header$printresources = function (model) {
	return A2(
		_elm_lang$html$Html$a,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$href('/printresources'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$button,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Print Resources'),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Header$timeofdeath = function (model) {
	return A2(
		_elm_lang$html$Html$a,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$href('/timeofdeath'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$button,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Time of Death'),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Header$communiontosick = function (model) {
	return A2(
		_elm_lang$html$Html$a,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$href('/communiontosick'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$button,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Communion to Sick'),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Header$tothesick = function (model) {
	return A2(
		_elm_lang$html$Html$a,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$href('/tothesick'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$button,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('To The Sick'),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Header$reconciliation = function (model) {
	return A2(
		_elm_lang$html$Html$a,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$href('/reconciliation'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$button,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Reconciliation'),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Header$family = function (model) {
	return A2(
		_elm_lang$html$Html$a,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$href('/family'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$button,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Family Prayer'),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Header$compline = function (model) {
	return A2(
		_elm_lang$html$Html$a,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$href('/compline'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$button,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Compline'),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Header$evening = function (model) {
	return A2(
		_elm_lang$html$Html$a,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$href('/ep'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$button,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Evening Prayer'),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Header$midday = function (model) {
	return A2(
		_elm_lang$html$Html$a,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$href('/midday'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$button,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Midday Prayer'),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Header$morning = function (model) {
	return A2(
		_elm_lang$html$Html$a,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$href('/morningPrayer'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$button,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Morning Prayer'),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Header$currentOffice = function (model) {
	return A2(
		_elm_lang$html$Html$a,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$href('/office'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$button,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Current Office'),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Header$resources = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('offices'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$button,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('button'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Resources'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$ul,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('offices-options'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$li,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('offices-item'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _user$project$Header$printresources(model),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$li,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('offices-item'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _user$project$Header$linkResource(model),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$li,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('offices-item'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _user$project$Header$inserts(model),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$li,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('offices-item'),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _user$project$Header$humor(model),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Header$offices = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('offices'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$button,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('button'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Offices'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$ul,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('offices-options'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$li,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('offices-item'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _user$project$Header$currentOffice(model),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$li,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('offices-item'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _user$project$Header$morning(model),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$li,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('offices-item'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _user$project$Header$midday(model),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$li,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('offices-item'),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _user$project$Header$evening(model),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$li,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('offices-item'),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _user$project$Header$compline(model),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$li,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('offices-item'),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _user$project$Header$family(model),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$li,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('offices-item'),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: _user$project$Header$reconciliation(model),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$li,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$class('offices-item'),
															_1: {ctor: '[]'}
														},
														{
															ctor: '::',
															_0: _user$project$Header$tothesick(model),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$li,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$class('offices-item'),
																_1: {ctor: '[]'}
															},
															{
																ctor: '::',
																_0: _user$project$Header$communiontosick(model),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$li,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$class('offices-item'),
																	_1: {ctor: '[]'}
																},
																{
																	ctor: '::',
																	_0: _user$project$Header$timeofdeath(model),
																	_1: {ctor: '[]'}
																}),
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Header$stations = function (model) {
	return A2(
		_elm_lang$html$Html$a,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$href('/stations'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$button,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Stations'),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Header$calendar = function (model) {
	return A2(
		_elm_lang$html$Html$a,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$href('/calendar'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$button,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Calendar'),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Header$tokenDecoder = A2(_elm_lang$core$Json_Decode$field, 'access_token', _elm_lang$core$Json_Decode$string);
var _user$project$Header$getUserCompleted = F2(
	function (model, result) {
		var _p0 = result;
		if (_p0.ctor === 'Ok') {
			var newModel = _elm_lang$core$Native_Utils.update(
				model,
				{user: _p0._0});
			return {ctor: '_Tuple2', _0: newModel, _1: _elm_lang$core$Platform_Cmd$none};
		} else {
			var user = model.user;
			var newUser = _elm_lang$core$Native_Utils.update(
				user,
				{
					error_msg: _elm_lang$core$Basics$toString(_p0._0)
				});
			var newModel = _elm_lang$core$Native_Utils.update(
				model,
				{user: newUser});
			return {ctor: '_Tuple2', _0: newModel, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _user$project$Header$loginUrl = 'login';
var _user$project$Header$userDecoder = A9(
	_elm_lang$core$Json_Decode$map8,
	_user$project$Iphod_Models$User,
	A2(_elm_lang$core$Json_Decode$field, 'username', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode$field, 'realname', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode$field, 'password', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode$field, 'password_confirmation', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode$field, 'email', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode$field, 'description', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode$field, 'error_msg', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode$field, 'token', _elm_lang$core$Json_Decode$string));
var _user$project$Header$loginEncoder = function (user) {
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'username',
				_1: _elm_lang$core$Json_Encode$string(user.username)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'password',
					_1: _elm_lang$core$Json_Encode$string(user.password)
				},
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Header$authUser = F2(
	function (model, apiUrl) {
		return _elm_lang$http$Http$request(
			{
				method: 'POST',
				headers: {
					ctor: '::',
					_0: A2(_elm_lang$http$Http$header, 'X-Csrf-Token', model.csrf_token),
					_1: {ctor: '[]'}
				},
				url: apiUrl,
				body: _elm_lang$http$Http$jsonBody(
					_user$project$Header$loginEncoder(model.user)),
				expect: _elm_lang$http$Http$expectJson(_user$project$Header$userDecoder),
				timeout: _elm_lang$core$Maybe$Nothing,
				withCredentials: true
			});
	});
var _user$project$Header$initModel = {email: _user$project$Iphod_Models$emailInit, config: _user$project$Iphod_Models$configInit, user: _user$project$Iphod_Models$userInit, csrf_token: ''};
var _user$project$Header$init = {ctor: '_Tuple2', _0: _user$project$Header$initModel, _1: _elm_lang$core$Platform_Cmd$none};
var _user$project$Header$sendEmail = _elm_lang$core$Native_Platform.outgoingPort(
	'sendEmail',
	function (v) {
		return {from: v.from, topic: v.topic, text: v.text};
	});
var _user$project$Header$saveConfig = _elm_lang$core$Native_Platform.outgoingPort(
	'saveConfig',
	function (v) {
		return {
			ot: v.ot,
			ps: v.ps,
			nt: v.nt,
			gs: v.gs,
			fnotes: v.fnotes,
			vers: _elm_lang$core$Native_List.toArray(v.vers).map(
				function (v) {
					return v;
				}),
			current: v.current
		};
	});
var _user$project$Header$getConfig = _elm_lang$core$Native_Platform.outgoingPort(
	'getConfig',
	function (v) {
		return {
			ot: v.ot,
			ps: v.ps,
			nt: v.nt,
			gs: v.gs,
			fnotes: v.fnotes,
			vers: _elm_lang$core$Native_List.toArray(v.vers).map(
				function (v) {
					return v;
				}),
			current: v.current
		};
	});
var _user$project$Header$saveLogin = _elm_lang$core$Native_Platform.outgoingPort(
	'saveLogin',
	function (v) {
		return {username: v.username, realname: v.realname, email: v.email, description: v.description, error_msg: v.error_msg, token: v.token, password: v.password, password_confirmation: v.password_confirmation};
	});
var _user$project$Header$currentUser = _elm_lang$core$Native_Platform.outgoingPort(
	'currentUser',
	function (v) {
		return {username: v.username, realname: v.realname, email: v.email, description: v.description, error_msg: v.error_msg, token: v.token, password: v.password, password_confirmation: v.password_confirmation};
	});
var _user$project$Header$portConfig = _elm_lang$core$Native_Platform.incomingPort(
	'portConfig',
	A2(
		_elm_lang$core$Json_Decode$andThen,
		function (ot) {
			return A2(
				_elm_lang$core$Json_Decode$andThen,
				function (ps) {
					return A2(
						_elm_lang$core$Json_Decode$andThen,
						function (nt) {
							return A2(
								_elm_lang$core$Json_Decode$andThen,
								function (gs) {
									return A2(
										_elm_lang$core$Json_Decode$andThen,
										function (fnotes) {
											return A2(
												_elm_lang$core$Json_Decode$andThen,
												function (vers) {
													return A2(
														_elm_lang$core$Json_Decode$andThen,
														function (current) {
															return _elm_lang$core$Json_Decode$succeed(
																{ot: ot, ps: ps, nt: nt, gs: gs, fnotes: fnotes, vers: vers, current: current});
														},
														A2(_elm_lang$core$Json_Decode$field, 'current', _elm_lang$core$Json_Decode$string));
												},
												A2(
													_elm_lang$core$Json_Decode$field,
													'vers',
													_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string)));
										},
										A2(_elm_lang$core$Json_Decode$field, 'fnotes', _elm_lang$core$Json_Decode$string));
								},
								A2(_elm_lang$core$Json_Decode$field, 'gs', _elm_lang$core$Json_Decode$string));
						},
						A2(_elm_lang$core$Json_Decode$field, 'nt', _elm_lang$core$Json_Decode$string));
				},
				A2(_elm_lang$core$Json_Decode$field, 'ps', _elm_lang$core$Json_Decode$string));
		},
		A2(_elm_lang$core$Json_Decode$field, 'ot', _elm_lang$core$Json_Decode$string)));
var _user$project$Header$portCSRFToken = _elm_lang$core$Native_Platform.incomingPort('portCSRFToken', _elm_lang$core$Json_Decode$string);
var _user$project$Header$portUser = _elm_lang$core$Native_Platform.incomingPort(
	'portUser',
	A2(
		_elm_lang$core$Json_Decode$andThen,
		function (username) {
			return A2(
				_elm_lang$core$Json_Decode$andThen,
				function (realname) {
					return A2(
						_elm_lang$core$Json_Decode$andThen,
						function (email) {
							return A2(
								_elm_lang$core$Json_Decode$andThen,
								function (description) {
									return A2(
										_elm_lang$core$Json_Decode$andThen,
										function (error_msg) {
											return A2(
												_elm_lang$core$Json_Decode$andThen,
												function (token) {
													return A2(
														_elm_lang$core$Json_Decode$andThen,
														function (password) {
															return A2(
																_elm_lang$core$Json_Decode$andThen,
																function (password_confirmation) {
																	return _elm_lang$core$Json_Decode$succeed(
																		{username: username, realname: realname, email: email, description: description, error_msg: error_msg, token: token, password: password, password_confirmation: password_confirmation});
																},
																A2(_elm_lang$core$Json_Decode$field, 'password_confirmation', _elm_lang$core$Json_Decode$string));
														},
														A2(_elm_lang$core$Json_Decode$field, 'password', _elm_lang$core$Json_Decode$string));
												},
												A2(_elm_lang$core$Json_Decode$field, 'token', _elm_lang$core$Json_Decode$string));
										},
										A2(_elm_lang$core$Json_Decode$field, 'error_msg', _elm_lang$core$Json_Decode$string));
								},
								A2(_elm_lang$core$Json_Decode$field, 'description', _elm_lang$core$Json_Decode$string));
						},
						A2(_elm_lang$core$Json_Decode$field, 'email', _elm_lang$core$Json_Decode$string));
				},
				A2(_elm_lang$core$Json_Decode$field, 'realname', _elm_lang$core$Json_Decode$string));
		},
		A2(_elm_lang$core$Json_Decode$field, 'username', _elm_lang$core$Json_Decode$string)));
var _user$project$Header$Model = F4(
	function (a, b, c, d) {
		return {email: a, config: b, user: c, csrf_token: d};
	});
var _user$project$Header$AuthError = function (a) {
	return {ctor: 'AuthError', _0: a};
};
var _user$project$Header$GetUser = function (a) {
	return {ctor: 'GetUser', _0: a};
};
var _user$project$Header$GetCSRFToken = function (a) {
	return {ctor: 'GetCSRFToken', _0: a};
};
var _user$project$Header$AuthUserCompleted = function (a) {
	return {ctor: 'AuthUserCompleted', _0: a};
};
var _user$project$Header$authUserCmd = F2(
	function (model, apiUrl) {
		return A2(
			_elm_lang$http$Http$send,
			_user$project$Header$AuthUserCompleted,
			A2(_user$project$Header$authUser, model, apiUrl));
	});
var _user$project$Header$update = F2(
	function (msg, model) {
		var _p1 = msg;
		switch (_p1.ctor) {
			case 'NoOp':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'Login':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: A2(_user$project$Header$authUserCmd, model, _user$project$Header$loginUrl)
				};
			case 'Logout':
				var newModel = _elm_lang$core$Native_Utils.update(
					model,
					{user: _user$project$Iphod_Models$userInit});
				return {
					ctor: '_Tuple2',
					_0: newModel,
					_1: _user$project$Header$saveLogin(newModel.user)
				};
			case 'GetTokenSuccess':
				var _p2 = _p1._0;
				var cmdMsg = _elm_lang$core$String$isEmpty(_p2.token) ? _elm_lang$core$Platform_Cmd$none : _user$project$Header$saveLogin(_p2);
				var newModel = _elm_lang$core$Native_Utils.update(
					model,
					{user: _p2});
				return {ctor: '_Tuple2', _0: newModel, _1: cmdMsg};
			case 'AuthUserCompleted':
				return A2(_user$project$Header$getUserCompleted, model, _p1._0);
			case 'AuthError':
				var user = model.user;
				var newUser = _elm_lang$core$Native_Utils.update(
					user,
					{
						error_msg: _elm_lang$core$Basics$toString(_p1._0)
					});
				var newModel = _elm_lang$core$Native_Utils.update(
					model,
					{user: newUser});
				return {ctor: '_Tuple2', _0: newModel, _1: _elm_lang$core$Platform_Cmd$none};
			case 'Send':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _user$project$Header$sendEmail(model.email)
				};
			case 'Clear':
				var e = model.email;
				var newEmail = _elm_lang$core$Native_Utils.update(
					e,
					{text: ''});
				var newModel = _elm_lang$core$Native_Utils.update(
					model,
					{email: newEmail});
				return {ctor: '_Tuple2', _0: newModel, _1: _elm_lang$core$Platform_Cmd$none};
			case 'Cancel':
				var newModel = _elm_lang$core$Native_Utils.update(
					model,
					{email: _user$project$Iphod_Models$emailInit});
				return {ctor: '_Tuple2', _0: newModel, _1: _elm_lang$core$Platform_Cmd$none};
			case 'UpdateConfig':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{config: _p1._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'EmailAddress':
				var e = model.email;
				var newEmail = _elm_lang$core$Native_Utils.update(
					e,
					{from: _p1._0});
				var newModel = _elm_lang$core$Native_Utils.update(
					model,
					{email: newEmail});
				return {ctor: '_Tuple2', _0: newModel, _1: _elm_lang$core$Platform_Cmd$none};
			case 'Topic':
				var e = model.email;
				var newEmail = _elm_lang$core$Native_Utils.update(
					e,
					{topic: _p1._0});
				var newModel = _elm_lang$core$Native_Utils.update(
					model,
					{email: newEmail});
				return {ctor: '_Tuple2', _0: newModel, _1: _elm_lang$core$Platform_Cmd$none};
			case 'Message':
				var e = model.email;
				var newEmail = _elm_lang$core$Native_Utils.update(
					e,
					{text: _p1._0});
				var newModel = _elm_lang$core$Native_Utils.update(
					model,
					{email: newEmail});
				return {ctor: '_Tuple2', _0: newModel, _1: _elm_lang$core$Platform_Cmd$none};
			case 'ModConfig':
				var newConfig = A2(_user$project$Iphod_Config$update, _p1._0, model.config);
				var newModel = _elm_lang$core$Native_Utils.update(
					model,
					{config: newConfig});
				return {
					ctor: '_Tuple2',
					_0: newModel,
					_1: _user$project$Header$saveConfig(newConfig)
				};
			case 'ModLogin':
				var newUser = A2(_user$project$Iphod_Login$update, _p1._0, model.user);
				var newModel = _elm_lang$core$Native_Utils.update(
					model,
					{user: newUser});
				return {ctor: '_Tuple2', _0: newModel, _1: _elm_lang$core$Platform_Cmd$none};
			case 'ModRegister':
				var newUser = A2(_user$project$Iphod_Login$update, _p1._0, model.user);
				var newModel = _elm_lang$core$Native_Utils.update(
					model,
					{user: newUser});
				return {ctor: '_Tuple2', _0: newModel, _1: _elm_lang$core$Platform_Cmd$none};
			case 'SetRegisterPassword':
				var user = model.user;
				var newUser = _elm_lang$core$Native_Utils.update(
					user,
					{password: _p1._0});
				var newModel = _elm_lang$core$Native_Utils.update(
					model,
					{user: newUser});
				return {ctor: '_Tuple2', _0: newModel, _1: _elm_lang$core$Platform_Cmd$none};
			case 'SetRegisterPasswordConfirmation':
				var user = model.user;
				var newUser = _elm_lang$core$Native_Utils.update(
					user,
					{password_confirmation: _p1._0});
				var newModel = _elm_lang$core$Native_Utils.update(
					model,
					{user: newUser});
				return {ctor: '_Tuple2', _0: newModel, _1: _elm_lang$core$Platform_Cmd$none};
			case 'SetRegisterUserName':
				var user = model.user;
				var newUser = _elm_lang$core$Native_Utils.update(
					user,
					{username: _p1._0});
				var newModel = _elm_lang$core$Native_Utils.update(
					model,
					{user: newUser});
				return {ctor: '_Tuple2', _0: newModel, _1: _elm_lang$core$Platform_Cmd$none};
			case 'SetRegisterRealName':
				var user = model.user;
				var newUser = _elm_lang$core$Native_Utils.update(
					user,
					{realname: _p1._0});
				var newModel = _elm_lang$core$Native_Utils.update(
					model,
					{user: newUser});
				return {ctor: '_Tuple2', _0: newModel, _1: _elm_lang$core$Platform_Cmd$none};
			case 'SetRegisterEmail':
				var user = model.user;
				var newUser = _elm_lang$core$Native_Utils.update(
					user,
					{email: _p1._0});
				var newModel = _elm_lang$core$Native_Utils.update(
					model,
					{user: newUser});
				return {ctor: '_Tuple2', _0: newModel, _1: _elm_lang$core$Platform_Cmd$none};
			case 'SetRegisterDescription':
				var user = model.user;
				var newUser = _elm_lang$core$Native_Utils.update(
					user,
					{description: _p1._0});
				var newModel = _elm_lang$core$Native_Utils.update(
					model,
					{user: newUser});
				return {ctor: '_Tuple2', _0: newModel, _1: _elm_lang$core$Platform_Cmd$none};
			case 'GetCSRFToken':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{csrf_token: _p1._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				var newModel = _elm_lang$core$Native_Utils.update(
					model,
					{user: _p1._0});
				return {ctor: '_Tuple2', _0: newModel, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _user$project$Header$GetTokenSuccess = function (a) {
	return {ctor: 'GetTokenSuccess', _0: a};
};
var _user$project$Header$Logout = {ctor: 'Logout'};
var _user$project$Header$Login = {ctor: 'Login'};
var _user$project$Header$SetRegisterDescription = function (a) {
	return {ctor: 'SetRegisterDescription', _0: a};
};
var _user$project$Header$registerDescription = function (user) {
	return A2(
		_elm_lang$html$Html$p,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$textarea,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$id('register_description'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('user-desciption'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$name('register_description'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$placeholder('Tell us about yourself - required'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$value(user.description),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onInput(_user$project$Header$SetRegisterDescription),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$autofocus(true),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				},
				{ctor: '[]'}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Header$SetRegisterEmail = function (a) {
	return {ctor: 'SetRegisterEmail', _0: a};
};
var _user$project$Header$SetRegisterRealName = function (a) {
	return {ctor: 'SetRegisterRealName', _0: a};
};
var _user$project$Header$SetRegisterUserName = function (a) {
	return {ctor: 'SetRegisterUserName', _0: a};
};
var _user$project$Header$SetRegisterPasswordConfirmation = function (a) {
	return {ctor: 'SetRegisterPasswordConfirmation', _0: a};
};
var _user$project$Header$SetRegisterPassword = function (a) {
	return {ctor: 'SetRegisterPassword', _0: a};
};
var _user$project$Header$ModRegister = function (a) {
	return {ctor: 'ModRegister', _0: a};
};
var _user$project$Header$ModLogin = function (a) {
	return {ctor: 'ModLogin', _0: a};
};
var _user$project$Header$ModConfig = function (a) {
	return {ctor: 'ModConfig', _0: a};
};
var _user$project$Header$configModal = function (model) {
	return A2(
		_elm_lang$html$Html$span,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$a,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$href('#config-text'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$button,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Config'),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$id('config-text'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('configModalDialog'),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$a,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$href('#closeconfig-text'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$title('Close'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('close'),
												_1: {ctor: '[]'}
											}
										}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('X'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$h2,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('modal_header'),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('Config'),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$map,
											_user$project$Header$ModConfig,
											_user$project$Iphod_Config$view(model.config)),
										_1: {ctor: '[]'}
									}
								}
							}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Header$Message = function (a) {
	return {ctor: 'Message', _0: a};
};
var _user$project$Header$inputMessage = function (model) {
	return A2(
		_elm_lang$html$Html$p,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$textarea,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$id('text'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('email-msg-addr'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$name('text'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$placeholder('Enter Message - required'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$value(model.text),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onInput(_user$project$Header$Message),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$autofocus(true),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				},
				{ctor: '[]'}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Header$Topic = function (a) {
	return {ctor: 'Topic', _0: a};
};
var _user$project$Header$inputSubject = function (model) {
	return A2(
		_elm_lang$html$Html$p,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$input,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$id('topic'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('email-subject'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$name('topic'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$type_('text'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$placeholder('Subject - required'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$value(model.topic),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Events$onInput(_user$project$Header$Topic),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$autofocus(true),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}
				},
				{ctor: '[]'}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Header$EmailAddress = function (a) {
	return {ctor: 'EmailAddress', _0: a};
};
var _user$project$Header$inputEmailAddress = function (model) {
	return A2(
		_elm_lang$html$Html$p,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$input,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$id('from'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('email-addr'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$name('from'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$type_('text'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$placeholder('Your Email Address - required'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$value(model.from),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Events$onInput(_user$project$Header$EmailAddress),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$autofocus(true),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}
				},
				{ctor: '[]'}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Header$UpdateConfig = function (a) {
	return {ctor: 'UpdateConfig', _0: a};
};
var _user$project$Header$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: _user$project$Header$portConfig(_user$project$Header$UpdateConfig),
			_1: {
				ctor: '::',
				_0: _user$project$Header$portCSRFToken(_user$project$Header$GetCSRFToken),
				_1: {
					ctor: '::',
					_0: _user$project$Header$portUser(_user$project$Header$GetUser),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$Header$Cancel = {ctor: 'Cancel'};
var _user$project$Header$Clear = {ctor: 'Clear'};
var _user$project$Header$Send = {ctor: 'Send'};
var _user$project$Header$emailMe = function (model) {
	return A2(
		_elm_lang$html$Html$span,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$a,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$href('#email-create'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$button,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Contact'),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$id('email-create'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('emailModalDialog'),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$a,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$href('#closeemail-create'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$title('Close'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('close'),
												_1: {ctor: '[]'}
											}
										}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('X'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$h2,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('modal_header'),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('Contact'),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: _user$project$Header$inputEmailAddress(model.email),
										_1: {
											ctor: '::',
											_0: _user$project$Header$inputSubject(model.email),
											_1: {
												ctor: '::',
												_0: _user$project$Header$inputMessage(model.email),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$a,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$href('#closeemail-create'),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$title('Send'),
																_1: {ctor: '[]'}
															}
														},
														{
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$button,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$class('email-button'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$html$Html_Events$onClick(_user$project$Header$Send),
																		_1: {ctor: '[]'}
																	}
																},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text('Send'),
																	_1: {ctor: '[]'}
																}),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$button,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$class('email-button'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$html$Html_Events$onClick(_user$project$Header$Clear),
																	_1: {ctor: '[]'}
																}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('Clear Message'),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$a,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$href('#closeemail-create'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$title('Cancel'),
																		_1: {ctor: '[]'}
																	}
																},
																{
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$button,
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$class('email-button'),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$html$Html_Events$onClick(_user$project$Header$Cancel),
																				_1: {ctor: '[]'}
																			}
																		},
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html$text('Cancel'),
																			_1: {ctor: '[]'}
																		}),
																	_1: {ctor: '[]'}
																}),
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}
									}
								}
							}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Header$aboutOptions = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('offices'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$button,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('button'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('About'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$ul,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('offices-options'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$li,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('offices-item'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _user$project$Header$aboutModal,
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$li,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('offices-item'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _user$project$Header$emailMe(model),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$li,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('offices-item'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _user$project$Header$howToModal,
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Header$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$id('readings'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$input,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$id('fontsize-slider-input'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$type_('range'),
						_1: {
							ctor: '::',
							_0: A2(_elm_lang$html$Html_Attributes$attribute, 'min', '0.5'),
							_1: {
								ctor: '::',
								_0: A2(_elm_lang$html$Html_Attributes$attribute, 'max', '2.5'),
								_1: {
									ctor: '::',
									_0: A2(_elm_lang$html$Html_Attributes$attribute, 'value', '0.8'),
									_1: {
										ctor: '::',
										_0: A2(_elm_lang$html$Html_Attributes$attribute, 'step', '0.1'),
										_1: {
											ctor: '::',
											_0: A2(_elm_lang$html$Html_Attributes$attribute, 'data-rangeslider', ''),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$output,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('blork'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$ul,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$id('header-options'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$li,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('option-item'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _user$project$Header$calendar(model),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$li,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('option-item'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _user$project$Header$offices(model),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$li,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('option-item'),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _user$project$Header$resources(model),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$li,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('option-item'),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _user$project$Header$stations(model),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$li,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('option-item'),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _user$project$Header$configModal(model),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$li,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('option-item'),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: _user$project$Header$translations(model),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$li,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$class('option-item'),
															_1: {ctor: '[]'}
														},
														{
															ctor: '::',
															_0: _user$project$Header$aboutOptions(model),
															_1: {ctor: '[]'}
														}),
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$Header$main = _elm_lang$html$Html$program(
	{init: _user$project$Header$init, update: _user$project$Header$update, view: _user$project$Header$view, subscriptions: _user$project$Header$subscriptions})();
var _user$project$Header$NoOp = {ctor: 'NoOp'};
var _user$project$Header$registerUserName = function (user) {
	return A2(
		_elm_lang$html$Html$p,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$input,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$id('username'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$type_('text'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$placeholder('User ID'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$autofocus(true),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$name('username'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onInput(_user$project$Header$SetRegisterUserName),
										_1: {
											ctor: '::',
											_0: A3(
												_elm_lang$html$Html_Events$onWithOptions,
												'click',
												{stopPropagation: true, preventDefault: true},
												_elm_lang$core$Json_Decode$succeed(_user$project$Header$NoOp)),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$value(user.username),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('user-username'),
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					}
				},
				{ctor: '[]'}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Header$registerRealName = function (user) {
	return A2(
		_elm_lang$html$Html$p,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$input,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$id('realname'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$type_('text'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$placeholder('Your Real Name'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$autofocus(true),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$name('realname'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onInput(_user$project$Header$SetRegisterRealName),
										_1: {
											ctor: '::',
											_0: A3(
												_elm_lang$html$Html_Events$onWithOptions,
												'click',
												{stopPropagation: true, preventDefault: true},
												_elm_lang$core$Json_Decode$succeed(_user$project$Header$NoOp)),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$value(user.realname),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('user-realname'),
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					}
				},
				{ctor: '[]'}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Header$registerPasswordConfirmation = function (user) {
	return A2(
		_elm_lang$html$Html$p,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$input,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$id('password_confirmation'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$type_('password'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$placeholder('Confirm Password'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$autofocus(true),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$name('password_confirmation'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onInput(_user$project$Header$SetRegisterPasswordConfirmation),
										_1: {
											ctor: '::',
											_0: A3(
												_elm_lang$html$Html_Events$onWithOptions,
												'click',
												{stopPropagation: true, preventDefault: true},
												_elm_lang$core$Json_Decode$succeed(_user$project$Header$NoOp)),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$value(user.password_confirmation),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('user-password'),
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					}
				},
				{ctor: '[]'}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Header$registerEmailAddress = function (user) {
	return A2(
		_elm_lang$html$Html$p,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$input,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$id('register_email'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$type_('text'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$placeholder('Email Address'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$autofocus(true),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$name('register_email'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onInput(_user$project$Header$SetRegisterEmail),
										_1: {
											ctor: '::',
											_0: A3(
												_elm_lang$html$Html_Events$onWithOptions,
												'click',
												{stopPropagation: true, preventDefault: true},
												_elm_lang$core$Json_Decode$succeed(_user$project$Header$NoOp)),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$value(user.email),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('user-email'),
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					}
				},
				{ctor: '[]'}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Header$onEnter = function (msg) {
	var tagger = function (code) {
		return _elm_lang$core$Native_Utils.eq(code, 13) ? msg : _user$project$Header$NoOp;
	};
	return A2(
		_elm_lang$html$Html_Events$on,
		'keydown',
		A2(_elm_lang$core$Json_Decode$map, tagger, _elm_lang$html$Html_Events$keyCode));
};
var _user$project$Header$registerPassword = function (user) {
	return A2(
		_elm_lang$html$Html$p,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$input,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$id('password'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$type_('password'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$placeholder('Password'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$autofocus(true),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$name('password'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onInput(_user$project$Header$SetRegisterPassword),
										_1: {
											ctor: '::',
											_0: _user$project$Header$onEnter(_user$project$Header$Login),
											_1: {
												ctor: '::',
												_0: A3(
													_elm_lang$html$Html_Events$onWithOptions,
													'click',
													{stopPropagation: true, preventDefault: true},
													_elm_lang$core$Json_Decode$succeed(_user$project$Header$NoOp)),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$value(user.password),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('user-password'),
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				},
				{ctor: '[]'}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Header$login = function (user) {
	return A2(
		_elm_lang$html$Html$span,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$a,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$href('#login-text'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$button,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Login'),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$id('login-text'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('loginModalDialog'),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$a,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$href('#closelogin-text'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$title('Close'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('close'),
												_1: {ctor: '[]'}
											}
										}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('X'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$h2,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('modal_header'),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('Login'),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: _user$project$Header$registerUserName(user),
										_1: {
											ctor: '::',
											_0: _user$project$Header$registerPassword(user),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$p,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('login-error'),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text(user.error_msg),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$p,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$class('login-error'),
															_1: {ctor: '[]'}
														},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text(
																A2(_elm_lang$core$Basics_ops['++'], 'User: ', user.username)),
															_1: {ctor: '[]'}
														}),
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Header$register = function (user) {
	return A2(
		_elm_lang$html$Html$span,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$a,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$href('#register-text'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$button,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Register'),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$id('register-text'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('registerModalDialog'),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$a,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$href('#closeregister-text'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$title('Close'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('close'),
												_1: {ctor: '[]'}
											}
										}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('X'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$h2,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('modal_header'),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('Register'),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$map,
											_user$project$Header$ModRegister,
											_user$project$Iphod_Login$view(user)),
										_1: {
											ctor: '::',
											_0: _user$project$Header$registerUserName(user),
											_1: {
												ctor: '::',
												_0: _user$project$Header$registerRealName(user),
												_1: {
													ctor: '::',
													_0: _user$project$Header$registerEmailAddress(user),
													_1: {
														ctor: '::',
														_0: _user$project$Header$registerDescription(user),
														_1: {
															ctor: '::',
															_0: _user$project$Header$registerPassword(user),
															_1: {
																ctor: '::',
																_0: _user$project$Header$registerPasswordConfirmation(user),
																_1: {ctor: '[]'}
															}
														}
													}
												}
											}
										}
									}
								}
							}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		});
};
