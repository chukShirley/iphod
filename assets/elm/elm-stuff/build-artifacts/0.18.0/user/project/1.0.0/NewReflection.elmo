var _user$project$NewReflection$initModel = {id: 0, date: '', author: '', text: '', published: false};
var _user$project$NewReflection$init = {ctor: '_Tuple2', _0: _user$project$NewReflection$initModel, _1: _elm_lang$core$Platform_Cmd$none};
var _user$project$NewReflection$portSubmit = _elm_lang$core$Native_Platform.outgoingPort(
	'portSubmit',
	function (v) {
		return {id: v.id, date: v.date, author: v.author, text: v.text, published: v.published};
	});
var _user$project$NewReflection$portReset = _elm_lang$core$Native_Platform.outgoingPort(
	'portReset',
	function (v) {
		return {id: v.id, date: v.date, author: v.author, text: v.text, published: v.published};
	});
var _user$project$NewReflection$portBack = _elm_lang$core$Native_Platform.outgoingPort(
	'portBack',
	function (v) {
		return {id: v.id, date: v.date, author: v.author, text: v.text, published: v.published};
	});
var _user$project$NewReflection$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'NoOp':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'InitRefl':
				var _p1 = _p0._0;
				var foo = A2(_elm_lang$core$Debug$log, 'INIT REFL', _p1);
				return {ctor: '_Tuple2', _0: _p1, _1: _elm_lang$core$Platform_Cmd$none};
			case 'ReflectionDate':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{date: _p0._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'ReflectionAuthor':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{author: _p0._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'ReflectionText':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{text: _p0._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Submit':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _user$project$NewReflection$portSubmit(model)
				};
			case 'Reset':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _user$project$NewReflection$portReset(model)
				};
			case 'Back':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _user$project$NewReflection$portBack(model)
				};
			default:
				var _p2 = _p0._0;
				var newModel = _elm_lang$core$Native_Utils.update(
					model,
					{published: _p2});
				var foo = A2(_elm_lang$core$Debug$log, 'PUBLISHED', _p2);
				return {
					ctor: '_Tuple2',
					_0: newModel,
					_1: _user$project$NewReflection$portSubmit(newModel)
				};
		}
	});
var _user$project$NewReflection$portReflection = _elm_lang$core$Native_Platform.incomingPort(
	'portReflection',
	A2(
		_elm_lang$core$Json_Decode$andThen,
		function (id) {
			return A2(
				_elm_lang$core$Json_Decode$andThen,
				function (date) {
					return A2(
						_elm_lang$core$Json_Decode$andThen,
						function (author) {
							return A2(
								_elm_lang$core$Json_Decode$andThen,
								function (text) {
									return A2(
										_elm_lang$core$Json_Decode$andThen,
										function (published) {
											return _elm_lang$core$Json_Decode$succeed(
												{id: id, date: date, author: author, text: text, published: published});
										},
										A2(_elm_lang$core$Json_Decode$field, 'published', _elm_lang$core$Json_Decode$bool));
								},
								A2(_elm_lang$core$Json_Decode$field, 'text', _elm_lang$core$Json_Decode$string));
						},
						A2(_elm_lang$core$Json_Decode$field, 'author', _elm_lang$core$Json_Decode$string));
				},
				A2(_elm_lang$core$Json_Decode$field, 'date', _elm_lang$core$Json_Decode$string));
		},
		A2(_elm_lang$core$Json_Decode$field, 'id', _elm_lang$core$Json_Decode$int)));
var _user$project$NewReflection$Model = F5(
	function (a, b, c, d, e) {
		return {id: a, date: b, author: c, text: d, published: e};
	});
var _user$project$NewReflection$Published = function (a) {
	return {ctor: 'Published', _0: a};
};
var _user$project$NewReflection$showText = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$id('preview'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h3,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('reflection-preview'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Preview  '),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$span,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'normal'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'font-size', _1: '0.7em'},
											_1: {ctor: '[]'}
										}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('( published'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$input,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$type_('checkbox'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$checked(model.published),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Events$onCheck(_user$project$NewReflection$Published),
											_1: {ctor: '[]'}
										}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$span,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'normal'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'font-size', _1: '0.7em'},
													_1: {ctor: '[]'}
												}
											}),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(')'),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}
					}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$id('md-text'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_evancz$elm_markdown$Markdown$toHtml,
							{ctor: '[]'},
							model.text),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$NewReflection$Back = {ctor: 'Back'};
var _user$project$NewReflection$Reset = {ctor: 'Reset'};
var _user$project$NewReflection$Submit = {ctor: 'Submit'};
var _user$project$NewReflection$ReflectionText = function (a) {
	return {ctor: 'ReflectionText', _0: a};
};
var _user$project$NewReflection$inputText = function (model) {
	return A2(
		_elm_lang$html$Html$p,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$id('refl-textarea'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$textarea,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$id('reflection-text'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$name('reflection-text'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$placeholder('Use Markdown formatting'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$value(model.text),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onInput(_user$project$NewReflection$ReflectionText),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$autofocus(true),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				},
				{ctor: '[]'}),
			_1: {ctor: '[]'}
		});
};
var _user$project$NewReflection$ReflectionAuthor = function (a) {
	return {ctor: 'ReflectionAuthor', _0: a};
};
var _user$project$NewReflection$inputAuthor = function (model) {
	return A2(
		_elm_lang$html$Html$p,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$input,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$id('reflection-author'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$name('reflection-author'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$type_('text'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$placeholder('Your name'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$value(model.author),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onInput(_user$project$NewReflection$ReflectionAuthor),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$autofocus(true),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				},
				{ctor: '[]'}),
			_1: {ctor: '[]'}
		});
};
var _user$project$NewReflection$ReflectionDate = function (a) {
	return {ctor: 'ReflectionDate', _0: a};
};
var _user$project$NewReflection$inputDate = function (model) {
	return A2(
		_elm_lang$html$Html$p,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$input,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$id('reflection-date'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$name('reflection-date'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$type_('text'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$placeholder('Reflection Date'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$value(model.date),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onInput(_user$project$NewReflection$ReflectionDate),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$autofocus(true),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				},
				{ctor: '[]'}),
			_1: {ctor: '[]'}
		});
};
var _user$project$NewReflection$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$id('refl-edit'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _user$project$NewReflection$inputDate(model),
			_1: {
				ctor: '::',
				_0: _user$project$NewReflection$inputAuthor(model),
				_1: {
					ctor: '::',
					_0: _user$project$NewReflection$inputText(model),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$ul,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$id('refl-buttons'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$li,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$button,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Events$onClick(_user$project$NewReflection$Submit),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('Save'),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$li,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$button,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Events$onClick(_user$project$NewReflection$Reset),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('Reset'),
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$li,
											{ctor: '[]'},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$button,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Events$onClick(_user$project$NewReflection$Back),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('List'),
														_1: {ctor: '[]'}
													}),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}
								}
							}),
						_1: {
							ctor: '::',
							_0: _user$project$NewReflection$showText(model),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		});
};
var _user$project$NewReflection$InitRefl = function (a) {
	return {ctor: 'InitRefl', _0: a};
};
var _user$project$NewReflection$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: _user$project$NewReflection$portReflection(_user$project$NewReflection$InitRefl),
			_1: {ctor: '[]'}
		});
};
var _user$project$NewReflection$main = _elm_lang$html$Html$program(
	{init: _user$project$NewReflection$init, update: _user$project$NewReflection$update, view: _user$project$NewReflection$view, subscriptions: _user$project$NewReflection$subscriptions})();
var _user$project$NewReflection$NoOp = {ctor: 'NoOp'};
